# OclAny type operations descriptions
# -----------------------------------
OclAny.debug=Returns the self value and writes the given parameter string to the console
OclAny.oclIsKindOf=Returns a boolean value stating whether self is an either an instance of t or of one of its subtypes
OclAny.refGetValue=Is a reflective operation that returns the value of the self feature identified by name
OclAny.refUnsetValue=Set the self feature identified by name to OclUndefined; it returns self
OclAny.refImmediateComposite=This is a reflective operation that returns the immediate composite (e.g. the immediate container) of self
OclAny.refInvokeOperation=This is a reflective operation that enables to invoke the self operation named opName, with the sequence of parameter contained by args
OclAny.refSetValue=This is a reflective operation that enables to set the self feature identified by name to value value; it returns self
OclAny.toString=Returns a string representation of self. Note that the operation may return irrelevant string values for a few remaining types
OclAny.oclType=Returns the oclType of self
OclAny.oclIsUndefined=Returns a boolean value stating whether self is undefined
OclAny.oclIsTypeOf=Returns a boolean value stating whether self is an instance of t

# String type operations descriptions
# -----------------------------------
String.toReal=Returns a real value of self
String.toUpper=Returns an upper case copy of self
String.writeToWithCharset=Enables to write the self string into the file identified by the string fileName with the specified charSet encoding. Note that this string may encode either a full or a relative path to the file. In the last case, the path is relative to the \eclipse directory from which the ATL tool kit is run. If the identified file already exists, the function writes the new content over this existing file
String.indexOf=Returns the index (an integer value) within self of the first occurrence of the specified substring s
String.replaceAll=Returns a copy of self in which each occurrence of character c1  is replaced with the character c2. Note that both c1 and c2  are specified as OCL strings. However the function only considers the first character of each of the provided strings
String.toSequence=Returns the sequence of characters (e.g. of one-character strings) corresponding to self
String.substring=Returns the substring of self starting from character lower to character upper
String.trim=Returns a copy of self with leading and trailing white spaces (' ', '\t', '\n', '\f', '\r') omitted
String.split=Splits the self string around matches of the regular expression regex. Specification of regular expression must follow the definition of Java regular expressions. Result is returned as a sequence of strings
String.endsWith=Return a boolean value stating whether self ends with s
String.regexReplaceAll=Returns a copy of self in which each substring of this string that matches the given regular expression regex is replaced with the given replacement. Specification of regular expression must follow the definition of Java regular expressions
String.println=Writes the self string onto the default output, that is the Eclipse console
String.writeTo=Enables to write the self string into the file identified by the string fileName. Note that this string may encode either a full or a relative path to the file. In the last case, the path is relative to the \eclipse directory from which the ATL tool kit is run. If the identified file already exists, the function writes the new content over this existing file
String.toLower=Returns a lower case copy of self
String.concat=Returns a string in which the specified string s is concatenated to the end of self
String.lastIndexOf=Returns the index (an integer value) within self of the last occurrence of the specified substring s
String.startsWith=Return a boolean value stating whether self starts with s
String.size=Returns the number of characters contained by the string self
String.toInteger=Returns an integer value of self

# Boolean type operations descriptions
# -----------------------------------
Boolean.implies=Returns false if self is true and b is false, and returns true otherwise

# Real type operations descriptions
# -----------------------------------
Real.log=Returns the logarithmic value of self
Real.acos=Returns the arc cosinus value of self
Real.sin=Returns the sinus value of self
Real.abs=Returns the absolute value of self
Real.tan=Returns the tangente value of self
Real.round=Returns a rounded value of self
Real.toRadians=Returns the value of self in radians
Real.floor=Returns the floor value of self
Real.sqrt=Returns the square root of self
Real.max=Returns the maximum value between self and r
Real.exp=Returns the exponential value of self
Real.atan=Returns the arc tangente value of self
Real.cos=Returns the cosinus value of self
Real.min=Returns the minimum value between self and r
Real.asin=Returns the arc sinus value of self
Real.toDegrees=Returns the value of self in degrees

# Integer type operations descriptions
# -----------------------------------
Integer.min=Returns the minimum value between self and r
Integer.abs=Returns the absolute value of self
Integer.toBinaryString=Returns a binary string value of self
Integer.mod=Returns the module value of self
Integer.max=Returns the maximum value between self and r
Integer.toHexString=Returns a hexadecimal string value of self

# Collection type operations descriptions
# -----------------------------------
Collection.size=Returns the number of elements in the collection self
Collection.sum=Returns a value that corresponds to the addition of all elements in self. These elements must be of a type that support the + operation
Collection.asOrderedSet=Returns an ordered set containing the elements of self
Collection.isEmpty=Returns a boolean stating whether the collection self is empty
Collection.includes=Returns a boolean stating whether the object o is part of the collection self
Collection.asSequence=Returns a sequence containing the elements of the self collection. Introduces an order from a bag or a set. Has no effect in the context of a sequence
Collection.excludesAll=Returns a boolean stating whether none of the objects contained by the collection c are part of the self sequence
Collection.excludes=Returns a boolean stating whether the object o is not part of the collection self
Collection.asSet=Returns a set containing the elements of the self collection. Order is lost from a sequence or an ordered set. Duplicates are removed from a bag or a sequence. Has no effect in the context of a set
Collection.notEmpty=Returns a boolean stating whether the collection self is not empty
Collection.count=Returns the number of times the object o occurs in the collection self
Collection.asBag=Returns a bag containing the elements of the self collection. Order is lost from a sequence or an ordered set. Has no effect in the context of a bag

# Sequence type operations descriptions
# -----------------------------------
Sequence.append=Returns a copy of self with the element o added at the end of the sequence
Sequence.last=Returns the last element of self (oclUndefined if self  is empty)
Sequence.indexOf=Returns the rank of first occurrence of o in self
Sequence.insertAt=Returns a copy of self with the element o added at rank n  of the sequence
Sequence.first=Returns the first element of self (oclUndefined if self  is empty)
Sequence.subSequence=Returns a subsequence of self starting from rank lower to rank upper (both bounds being included)
Sequence.union=Returns a sequence composed of all elements of self followed by the elements of c
Sequence.prepend=Returns a copy of self with the element o added at the beginning of the sequence
Sequence.at=Returns the element located at rank n in self
Sequence.flatten=Returns a sequence directly containing the children of the nested subordinate collections contained by self
Sequence.including=Returns a copy of self with the element o added at the end of the sequence
Sequence.excluding=Returns a copy of self with all occurrences of element o removed
Sequence.includesAll=Returns a boolean stating whether all the objects contained by the sequence s are part of the self sequence

# Bag type operations descriptions
# -----------------------------------
Bag.flatten=Returns a sequence directly containing the children of the nested subordinate collections contained by self
Bag.including=Returns a copy of self with the element o added at the end of the ordered set if it does not already appear in self
Bag.excluding=Returns a copy of self with the o removed

# Set type operations descriptions
# -----------------------------------
Set.symetricDifference=Returns a set composed of the elements that are in self or s, but not in both
Set.intersection=Returns a set composed of the elements that appear both in self and c
Set.union=Returns a set composed of the elements of self and the elements of c with duplicates removed (they may appear within c, and between c and self elements)
Set.flatten=Returns a sequence directly containing the children of the nested subordinate collections contained by self
Set.including=Returns a copy of self with the element o if not already present in self
Set.excluding=Returns a copy of self with the element o removed from the set

# OrderedSet type operations descriptions
# -----------------------------------
OrderedSet.append=Returns a copy of self with the element o added at the end of the ordered set if it does not already appear in self
OrderedSet.last=Returns the last element of self (oclUndefined if self is empty)
OrderedSet.indexOf=Returns the rank of first occurrence of o in self
OrderedSet.insertAt=Returns a copy of self with the element o added at rank n  of the ordered set if it does not already appear in self
OrderedSet.first=Returns the first element of self (oclUndefined if self is empty)
OrderedSet.union=Returns an ordered set composed of the elements of self followed by the elements of c with duplicates removed (they may appear within c, and between c and self elements)
OrderedSet.prepend=Returns a copy of self with the element o added at the beginning of the ordered set if it does not already appear in self
OrderedSet.subOrderedSet=Returns a subOrderedSet of self starting from rank lower to rank upper (both bounds being included)
OrderedSet.at=Returns the element located at rank n in self
OrderedSet.flatten=Returns an ordered set directly containing the children of the nested subordinate collections contained by self
OrderedSet.including=Returns a copy of self with the element o added at the end of the ordered set if it does not already appear in self
OrderedSet.excluding=Returns a copy of self with the o removed

# Map type operations descriptions
# -----------------------------------
Map.get=Returns the value associated with key within the self map (or OclUndefined if key is not a key of self)
Map.union=Returns a map containing all self elements to which are added those elements of m whose key does not appear in self
Map.including=Returns a copy of self in which the couple (key, val) has been inserted if key is not already a key of self
Map.getKeys=Returns a set containing all the keys of self
Map.getValues=Returns a bag containing all the values of self

# Tuple type operations descriptions
# -----------------------------------
Tuple.asMap=Returns a map representation of self, with self names as keys and self values as values
