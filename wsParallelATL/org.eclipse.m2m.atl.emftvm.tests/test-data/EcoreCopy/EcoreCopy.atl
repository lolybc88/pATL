-- @atlcompiler emftvm
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- $Id: EcoreCopy.atl,v 1.1 2012/05/16 19:42:19 dwagelaar Exp $
-- Copies EMF Ecore models.
module EcoreCopy;

create OUT : ECORE from IN : ECORE;

rule EAttribute {
    from s : ECORE!EAttribute in IN
    to t : ECORE!EAttribute (
        name <- s.name,
        ordered <- s.ordered,
        "unique" <- s."unique",
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        iD <- s.iD,
        eAnnotations <- s.eAnnotations,
        eType <- s.eType)
}

rule EAnnotation {
    from s : ECORE!EAnnotation in IN
    to t : ECORE!EAnnotation (
        source <- s.source,
        eAnnotations <- s.eAnnotations,
        details <- s.details)
}

rule EClass {
    from s : ECORE!EClass in IN
    to t : ECORE!EClass (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        "abstract" <- s."abstract",
        interface <- s.interface,
        eAnnotations <- s.eAnnotations,
        eTypeParameters <- s.eTypeParameters,
        eSuperTypes <- s.eSuperTypes,
        eOperations <- s.eOperations,
        eStructuralFeatures <- s.eStructuralFeatures)
}

rule EDataType {
    from s : ECORE!EDataType in IN (s.oclIsTypeOf(ECORE!EDataType))
    to t : ECORE!EDataType (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations,
        eTypeParameters <- s.eTypeParameters)
}

rule EEnum {
    from s : ECORE!EEnum in IN
    to t : ECORE!EEnum (
        name <- s.name,
        instanceClassName <- s.instanceClassName,
        instanceTypeName <- s.instanceTypeName,
        serializable <- s.serializable,
        eAnnotations <- s.eAnnotations,
        eTypeParameters <- s.eTypeParameters,
        eLiterals <- s.eLiterals)
}

rule EEnumLiteral {
    from s : ECORE!EEnumLiteral in IN
    to t : ECORE!EEnumLiteral (
        name <- s.name,
        value <- s.value,
        literal <- s.literal,
        eAnnotations <- s.eAnnotations)
}

rule EOperation {
    from s : ECORE!EOperation in IN
    to t : ECORE!EOperation (
        name <- s.name,
        ordered <- s.ordered,
        "unique" <- s."unique",
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        eAnnotations <- s.eAnnotations,
        eType <- s.eType,
        eTypeParameters <- s.eTypeParameters,
        eParameters <- s.eParameters,
        eExceptions <- s.eExceptions)
}

rule EPackage {
    from s : ECORE!EPackage in IN
    to t : ECORE!EPackage (
        name <- s.name,
        nsURI <- s.nsURI,
        nsPrefix <- s.nsPrefix,
        eAnnotations <- s.eAnnotations,
        eClassifiers <- s.eClassifiers,
        eSubpackages <- s.eSubpackages)
}

rule EParameter {
    from s : ECORE!EParameter in IN
    to t : ECORE!EParameter (
        name <- s.name,
        ordered <- s.ordered,
        "unique" <- s."unique",
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        eAnnotations <- s.eAnnotations,
        eType <- s.eType)
}

rule EReference {
    from s : ECORE!EReference in IN
    to t : ECORE!EReference (
        name <- s.name,
        ordered <- s.ordered,
        "unique" <- s."unique",
        lowerBound <- s.lowerBound,
        upperBound <- s.upperBound,
        changeable <- s.changeable,
        volatile <- s.volatile,
        transient <- s.transient,
        defaultValueLiteral <- s.defaultValueLiteral,
        unsettable <- s.unsettable,
        "derived" <- s."derived",
        containment <- s.containment,
        resolveProxies <- s.resolveProxies,
        eAnnotations <- s.eAnnotations,
        eType <- s.eType,
        eOpposite <- s.eOpposite,
        eKeys <- s.eKeys)
}

rule EStringToStringMapEntry {
    from s : ECORE!EStringToStringMapEntry in IN
    to t : ECORE!EStringToStringMapEntry (
        key <- s.key,
        value <- s.value)
}

rule ETypeParameter {
    from s : ECORE!ETypeParameter in IN
    to t : ECORE!ETypeParameter (
        name <- s.name,
        eAnnotations <- s.eAnnotations)
}

