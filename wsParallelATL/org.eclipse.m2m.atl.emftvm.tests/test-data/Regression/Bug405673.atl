-- @atlcompiler emftvm
-- @path AADLBA=/org.eclipse.m2m.atl.emftvm.tests/test-data/Regression/aadlba-stub.ecore
module Bug405673;

create OUT : AADLBA from IN : AADLBA;

helper def: process_sourceImplImg: AADLBA!ProcessImplementation = OclUndefined;

helper def : counter : Integer = 0;

rule addImportedUnit(packageImg: AADLBA!PackageSection,	model: String,	importedPackage:String) {
  using
  {
    unit: AADLBA!ModelUnit = AADLBA!ModelUnit->allInstancesFrom(model)->any(e|e.name = importedPackage);
    isNotYetImported: Boolean =  AADLBA!ModelUnit->allInstancesFrom('OUT')->any(e|e.name = importedPackage).oclIsUndefined();
  }
  do
  {
    if(isNotYetImported)
    {
      packageImg.importedUnit <- packageImg.importedUnit->including(unit);
    }
  }
}

rule SubprogramCall (s : AADLBA!SubprogramCall) {
    to
        s2 : AADLBA!SubprogramCall (
            name <- s.name
        )
    do
    {
        s2.calledSubprogram <- s.calledSubprogram;
    }
}

rule intraProcess_PortConnection_Instance
{
	from
		cnxInst: AADLBA!ConnectionInstance
	to
		d: AADLBA!DataSubcomponent (name<-cnxInst.name)
	do
	{
		thisModule.process_sourceImplImg <- cnxInst.subcomponentType.debug('Retreived Process Implementation');
		if(not thisModule.process_sourceImplImg.debug('@@@').ownedDataSubcomponent->exists(e|e.name=d.name))
		{
			-- This is the wrong programming model for ATL; 
			-- ProcessImplementation::ownedDataSubcomponent should be assigned in its own rule:
			-- Example: procImpl.ownedDataSubcomponent <- AADLBA!ConnectionInstance.allInstances()
			-- 				->select(ci | ci = AADLBA!ConnectionInstance.allInstances()
			-- 					->select(ci2 | ci2.name = ci.name)->first())
			thisModule.process_sourceImplImg.ownedDataSubcomponent.including(d); -- cannot use add()
		}		
	}
}

endpoint rule incCounter() {
	do {
		thisModule.counter <- thisModule.counter + 1;
		thisModule.counter.debug('counter');
	}
}